--- ConeListMenuApp.java


import java.util.Scanner;
import java.io.IOException;
import java.util.ArrayList;

/** Project 6 - Cone List Menu App.
*@author Noah Jones
*@version 02/24
*/
public class ConeListMenuApp {
/**param / throw.
*@throws IOException in main Command Line
*@param args Command Line is not used
*/ 
   public static void main(String[] args) throws IOException {
      
      String tListName = "no list name";
      ArrayList<Cone> coneList = new ArrayList<Cone>();
      ConeList myConeList = new ConeList(tListName, coneList);
      String fileName = "no file name";
      
      double s1, s2, s3;
      String code = "";
      Scanner scan = new Scanner(System.in);
      System.out.println("Cone List System Menu\n"
         + "R - Read file and Create Cone List\n"
         + "P - Print Cone List\n"
         + "S - Print Summary\n"
         + "A - Add Cone\n"
         + "D - Delete Cone\n"
         + "F - Find Cone\n"
         + "E - Edit Cone\n"
         + "Q - Quit\n");
      do {  
         System.out.println("Enter Code [R, P, S, A, D, F, E, or Q]");
         code = scan.nextLine();
         if (code.length() == 0) {
            continue;
         }
         code = code.toUpperCase();
         char codeChar = code.charAt(0);
         switch (codeChar) {
            case 'R' : //readFile to scan and creates ConeList
               System.out.print("\tFile Name:  ");
               fileName = scan.nextLine();
               
               myConeList = myConeList.readFile(fileName);
               System.out.println("\tFile read in and " 
                  + "ConeList object created\n");
               break;
                  
            case 'P': //Prints ConeList
               System.out.println(coneList);
               break;
            
         //         case 'S': //Prints Summary
            
         //         case 'A' //Adds cone to ConeList based on 
                      //scanned user input of double variable 
                      
         //         case 'D' //Deletes cone from ConeList using delete 
                      //function from Java API
            
         //         case 'F' //Find Cone in ConeList
            
         //         case 'E' // Edits Cone in ConeList
            
         //         case 'Q' // Quit
            
            default: //invalid user input, loop again 
               break;
         }
      } while (!code.equalsIgnoreCase("Q"));
   }
}

--- Cone.Java

import java.text.DecimalFormat;

/**
* Class that stores the label, height, and radius of a cone object
*
* Project 5
* @author Noah Jones
* @version 02/09/2021
*/

public class Cone
{
   //Instance variables
   private String label;
   private double height;
   private double radius;
   
   //Constructor
   /**
   * Initializes all variables.
   *
   * @param labelIn command line arguments.
   * @param heightIn command line arguments.
   * @param radiusIn command line arguments.
   */
   public Cone(String labelIn, double heightIn, double radiusIn)
   {
      label = labelIn;
      height = heightIn;
      radius = radiusIn;
   }
   
   //Methods
   /**
   * Checks to see if the label is null and if it is not
   * then it trims the label and returns true.
   *
   * @param labelIn command line args.
   * @return isSet returns true or false value.
   */
   public boolean setLabel(String labelIn)
   {
      boolean isSet = false;
      if (labelIn != null)
      {
         isSet = true;
         label = labelIn.trim();
      }
      return isSet;
   }
   
   /**
   * Returns the string label.
   *
   * @return label returns the label.
   */
   public String getLabel()
   {
      return label;
   }
   
   /**
   * Checks to see if the height is greater than 0.
   *
   * @param heightIn command line args.
   * @return isSet returns true or false value.
   */
   public boolean setHeight(double heightIn)
   {
      boolean isSet = false;
      if (heightIn > 0)
      {
         isSet = true;
         height = heightIn;
      }
      return isSet;
   }
   
   /**
   * Returns the double height.
   *
   * @return height returns the height.
   */
   public double getHeight()
   {
      return height;
   }
   
   /**
   * Checks to see if the radius is greater than 0.
   *
   * @param radiusIn command line args.
   * @return isSet returns true or false value.
   */
   public boolean setRadius(double radiusIn)
   {
      boolean isSet = false;
      if (radiusIn > 0)
      {
         isSet = true;
         radius = radiusIn;
      }
      return isSet;
   }
   
   /**
   * Returns the double radius.
   *
   * @return radius returns the radius.
   */
   public double getRadius()
   {
      return radius;
   }
   
   /**
   * Calculates the base perimeter of the cone.
   *
   * @return perimeter returns the perimeter.
   */
   public double basePerimeter()
   {
      double perimeter = 2 * radius * Math.PI;
      return perimeter;
   }
   
   /**
   * Calculates the base area of the cone.
   *
   * @return area returns the area.
   */
   public double baseArea()
   {
      double area = radius * radius * Math.PI;
      return area;
   }
   
   /**
   * Calculates the slant height of the cone.
   *
   * @return slantHeight returns the slant height.
   */
   public double slantHeight()
   {
      double slantHeight = Math.sqrt(radius * radius + height * height);
      return slantHeight;
   }
   
   /**
   * Calculates the side area of the cone.
   *
   * @return sideArea returns the side area.
   */
   public double sideArea()
   {
      double sideArea = Math.PI * radius * slantHeight();
      return sideArea;
   }
   
   /**
   * Calculates the surface area of the cone.
   *
   * @return surfaceArea returns the surface area.
   */
   public double surfaceArea()
   {
      double surfaceArea = Math.PI * radius * (radius + slantHeight());
      return surfaceArea;
   }
   
   /**
   * Calculates the volume of the cone.
   *
   * @return volume returns the volume.
   */
   public double volume()
   {
      double volume = Math.PI * radius * radius * height / 3;
      return volume;
   }
   
   /**
   * Formats the output jsut like in the example projects.
   *
   * @return output returns the formatted output.
   */
   public String toString()
   {
      DecimalFormat df1 = new DecimalFormat("#,##0.0##");
     
      String output = "\"" + label + "\" is a cone with height = " + height
         + " units and radius = " + radius + ",\n"
         + "which has a base perimeter = " + df1.format(basePerimeter())
         + " units," + " base area = " + df1.format(baseArea())
         + " square units,\n" + "slant height = " + df1.format(slantHeight())
         + " units, " + "side area = " + df1.format(sideArea())
         + " square units,\n" + "surface area = " + df1.format(surfaceArea())
         + " square units, and" + " volume = " + df1.format(volume())
         + " cubic units.";
     
      return output;
   }
}

--- ConeList.java

import java.util.ArrayList;
import java.text.DecimalFormat;
import java.util.Scanner;
import java.io.File;
import java.io.IOException;
/** COMP 1213 - Project 4.
* @author Noah Jones
* @version 9/20/2016
*/
public class ConeList
{
// fields

   private String listName;
   private ArrayList<Cone> tList;
      
/**param.
* @param listNameIn is the list name entered by the user.
* @param tListIn is the array list of cone objects given by the user.
*/
   public ConeList(String listNameIn, ArrayList<Cone> tListIn)
   {
      listName = listNameIn;
      tList = tListIn;
   }
   
/**return.
* @return returns the list name.
*/
   public String getName()
   {
      return listName;
   }
/**return.
* @return the list size.
*/
   public int numberOfCones()
   {
      return tList.size();
   }
   
/**return.
* @return returns the total.
*/   
   public double totalBasePerimeter()
   {
      double total = 0;
   
      int index = 0;
      while (index < tList.size()) {
         total += tList.get(index).basePerimeter();
         index++;  
      }   
      return total;
   }

/**return.
* @return returns the total.
*/   
   public double totalBaseArea()
   {
      double total = 0;
   
      int index = 0;
      while (index < tList.size()) {
         total += tList.get(index).baseArea();
         index++;  
      }   
      return total;
   }
   
/**return.
* @return returns the total.
*/   
   public double totalSlantHeight()
   {
      double total = 0;
   
      int index = 0;
      while (index < tList.size()) {
         total += tList.get(index).slantHeight();
         index++;
      }
      return total;
   }
   
/**return.
* @return returns the total.
*/
   public double totalSideArea()
   {
      double total = 0;
   
      int index = 0;
      while (index < tList.size()) {
         total += tList.get(index).sideArea();
         index++;
      }
      return total;
   }
   
/**return.
* @return returns the total.
*/
   public double totalSurfaceArea()
   {
      double total = 0;
   
      int index = 0;
      while (index < tList.size()) {
         total += tList.get(index).surfaceArea();
         index++;
      }
      return total;
   }

/**return.
* @return returns the total.
*/
   public double totalVolume()
   {
      double total = 0;
   
      int index = 0;
      while (index < tList.size()) {
         total += tList.get(index).volume();
         index++;
      }
      return total;
   }
   
/**return.
* @return returns the average.
*/
   public double averageSurfaceArea()
   {
      double total = 0;
   
      int index = 0;
      while (index < tList.size()) {
         total += tList.get(index).surfaceArea();
         index++;
      }
      if (index == 0)
      {
         total = 0;
      }
      else
      {
         total = total / index;
      }
      return total;
   }
   
/**return.
* @return returns the average.
*/
   public double averageVolume()
   {
      double total = 0;
   
      int index = 0;
      while (index < tList.size()) {
         total += tList.get(index).volume();
         index++;
      }
      if (index == 0)
      {
         total = 0;
      }
      else
      {
         total = total / index;
      }
      
      return total;
   }
   
/**return.
 * @return returns the information.
 */
   public String toString() {
      String output = "\n" + this.getName() + "\n";
      int i = 0;
     
      while (i < this.numberOfCones()) {
         output += "\n" + tList.get(i).toString() + "\n";
      
         i++;
      }
     
      return output;
   }
   
/**return.
* @return returns thhe information.
*/
   public String summaryInfo()
   {
      DecimalFormat df = new DecimalFormat("#,##0.0##");
      String result = "";
      result += "----- Summary for " + getName() + " -----"; 
      result += "\nNumber of Cones: " + numberOfCones();
      result += "\nTotal Base Perimeter: " + df.format(totalBasePerimeter()); 
      result += "\nTotal Base Area: " + df.format(totalBaseArea());
      result += "\nTotal Slant Height: "  + df.format(totalSlantHeight());
      result += "\nTotal Side Area: " + df.format(totalSideArea());
      result += "\nTotal Surface Area: " + df.format(totalSurfaceArea());
      result += "\nTotal Volume: " + df.format(totalVolume());
      result += "\nAverage Surface Area: " + df.format(averageSurfaceArea());
      result += "\nAverage Volume: " + df.format(averageVolume());
      
      return result;
   }
   /**return.
   * @return array list of cones.
   */
   public ArrayList<Cone> getList()
   {
      return null;
   }
   
   /**throws, param / return.
   * @throws IOException for scanning file of cones.
   * @param file is the file name read.
   * @return the new cone list.
   */
   public ConeList readFile(String file) throws IOException
   {
      Scanner scan = new Scanner(System.in);
   
      String fileName = "";
      System.out.print("\tFile Name: ");
      fileName = scan.nextLine();
      Scanner scanFile = new Scanner(new File(fileName));
      listName = scanFile.nextLine();
      if (new File(fileName) == null) {
         return null;
      }
      while (scanFile.hasNext()) {
                  
         String labelIn = scanFile.nextLine();
         double heightIn = Double.parseDouble(scanFile.nextLine());
         double radiusIn = Double.parseDouble(scanFile.nextLine());
               
         Cone newCone = new Cone(labelIn, heightIn, radiusIn);
         tList.add(newCone);           
      }
      String listTitle = "";
      ConeList newConeList = new ConeList(listTitle, tList);
      System.out.println("\tFile read in and Cone List created");
      System.out.println("");
      return newConeList;
   }
   
   /** param.
   * @param labelIn is the label entered by the user.
   * @param heightIn is the height entered by the user.
   * @param radiusIn is the radius entered by the user.
   */
   public void addCone(String labelIn, double heightIn, double radiusIn)
   {
      Scanner scan = new Scanner(System.in);
   
      Cone coneAdd = new Cone(labelIn, heightIn, radiusIn);
      System.out.print("\tLabel: ");
      labelIn = scan.nextLine();
      coneAdd.setLabel(labelIn);
            
      System.out.print("\tHeight: ");
      heightIn = scan.nextDouble();
      coneAdd.setHeight(heightIn);
            
      System.out.print("\tRadius: ");
      radiusIn = scan.nextDouble();
      coneAdd.setRadius(radiusIn);
      tList.add(coneAdd);
   }
   
   /**param / return.
   * @param labelIn is the label entered by the user.
   * @return cone found in the list.
   */
   public Cone findCone(String labelIn)
   {
      Cone result = null;
      int index = -1;
      for (Cone t : tList) {
         if (t.getLabel().equalsIgnoreCase(labelIn))
         {
            index = tList.indexOf(t);
            break;
         }
      }
      
      if (index >= 0) {
         result = tList.get(index);
      }
      return result;
   }
   
   /**param.
   * @param labelIn is the label entered by the user.
   * @return cone found in the list.
   */
   public Cone deleteCone(String labelIn)
   {
      Cone result = null;
      int index = -1;
      for (Cone t : tList) {
         if (t.getLabel().equalsIgnoreCase(labelIn))
         {
            index = tList.indexOf(t);
            break;
         }
      }
      
      if (index >= 0) {
         result = tList.get(index);
         tList.remove(index);
      }
      return result;
   }
   
   /**param / return.
   * @param labelIn is the label entered by the user.
   * @param height is the height entered by the user.
   * @param radius is the radius entered by the user.
   * @return the cone selected from the list.
   */
   public boolean editCone(String labelIn, double height, double radius)
   {
      Cone result = null;
      int index = -1;
      for (Cone t : tList) {
         if (t.getLabel().equalsIgnoreCase(labelIn))
         {
            index = tList.indexOf(t);
            break;
         }
      }
      
      if (index >= 0) {
         result = tList.get(index);
         result.setHeight(height);
         result.setRadius(radius);
         return true;
      }
      return false;
   }
}
